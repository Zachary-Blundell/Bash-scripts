#!/bin/bash
# Author : Zachary Blundell
# Move dotfiles from ~/.config to ~/dotfiles/.config for backup,
# ensure required tools are installed (in one go), and stow them.
# Tools: stow, gum, fzf, fd

set -euo pipefail

die() {
  echo "❌ $*" >&2
  exit 1
}

# ---------- Package manager detection ----------
detect_pkg_manager() {
  for pm in apt-get apt dnf yum pacman zypper brew port; do
    if command -v "$pm" >/dev/null 2>&1; then
      echo "$pm"
      return 0
    fi
  done
  return 1
}

# Map command name -> package name per PM (so we can install in a single call)
map_pkg_name() {
  local pm="$1" cmd="$2"
  case "$pm" in
  apt | apt-get)
    case "$cmd" in
    fd) echo "fd-find" ;;
    *) echo "$cmd" ;;
    esac
    ;;
  dnf | yum)
    case "$cmd" in
    fd) echo "fd-find" ;;
    *) echo "$cmd" ;;
    esac
    ;;
  pacman | zypper | brew | port)
    case "$cmd" in
    fd) echo "fd" ;;
    *) echo "$cmd" ;;
    esac
    ;;
  *)
    echo "$cmd"
    ;;
  esac
}

install_packages() {
  local pm="$1"
  shift
  case "$pm" in
  apt | apt-get)
    sudo "$pm" update -y
    sudo "$pm" install -y "$@"
    ;;
  dnf | yum)
    sudo "$pm" install -y "$@"
    ;;
  pacman)
    sudo pacman -Sy --noconfirm "$@"
    ;;
  zypper)
    sudo zypper --non-interactive install "$@"
    ;;
  brew)
    brew install "$@"
    ;;
  port)
    sudo port install "$@"
    ;;
  *)
    return 1
    ;;
  esac
}

# ---------- Ensure dependencies (install missing in ONE go) ----------
ensure_dependencies() {
  local -a REQUIRED_CMDS=("git" "lazygit")
  local -a missing_cmds=()

  for c in "${REQUIRED_CMDS[@]}"; do
    command -v "$c" >/dev/null 2>&1 || missing_cmds+=("$c")
  done

  if ((${#missing_cmds[@]} == 0)); then
    echo "✅ All required tools are already installed."
  else
    local pm
    pm="$(detect_pkg_manager)" || die "No supported package manager found."

    # Translate commands to package names for this PM
    local -a pkgs=()
    local cmd pkg seen
    for cmd in "${missing_cmds[@]}"; do
      pkg="$(map_pkg_name "$pm" "$cmd")"
      # dedupe
      seen=0
      for p in "${pkgs[@]:-}"; do [[ "$p" == "$pkg" ]] && seen=1 && break; done
      ((seen == 0)) && pkgs+=("$pkg")
    done

    echo "⬇️  Installing missing tools with $pm: ${pkgs[*]}"
    install_packages "$pm" "${pkgs[@]}" || die "Failed to install one or more packages: ${pkgs[*]}"

    # Debian/Ubuntu: create a user-local 'fd' shim if only 'fdfind' exists
    if ! command -v fd >/dev/null 2>&1 && command -v fdfind >/dev/null 2>&1; then
      mkdir -p "$HOME/.local/bin"
      ln -sf "$(command -v fdfind)" "$HOME/.local/bin/fd"
      # Make sure this session can see it (persist in your shell rc for future)
      export PATH="$HOME/.local/bin:$PATH"
      echo "🔗 Created user-local shim: ~/.local/bin/fd -> $(command -v fdfind)"
    fi

    echo "✅ Tools installation complete."
  fi
}

ensure_exists() {
  local path="$1"
  if [[ ! -e "$path" ]]; then
    if command -v gum >/dev/null 2>&1; then
      gum confirm "The path '$path' does not exist. Create it?" && {
        mkdir -p "$path"
        echo "📁 Created '$path'."
      } || die "Aborting."
    else
      read -r -p "Create '$path'? [y/N] " reply
      [[ "$reply" =~ ^([yY]|[yY][eE][sS])$ ]] && {
        mkdir -p "$path"
        echo "📁 Created '$path'."
      } || die "Aborting."
    fi
  fi
}

# ---------- Config ----------
readonly backupRoot="$HOME/dotfiles"

clear
ensure_dependencies

ensure_exists "$backupRoot"

# ---------- Main loop ----------
cd "$backupRoot" || die "Failed to cd to $backupRoot"
lazygit || die "Lazygit failed"
echo "✅ All done!"
